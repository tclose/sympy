language: python
sudo: false
env:
  matrix:
  - TEST_DOCTESTS="true" FASTCACHE="false" TEST_SETUP="true"
  - SPLIT="1/4" TEST_SYMPY="true"
  - SPLIT="2/4" TEST_SYMPY="true"
  - SPLIT="3/4" TEST_SYMPY="true"
  - SPLIT="4/4" TEST_SYMPY="true"
  global:
    - secure: "YIEZal9EBTL+fg2YmoZoS8Bvt3eAVUOZjb38CtqpzR2CCSXWoUk35KG23m2NknlY1iKfYJyt7XWBszT/VKOQEbWQq7PIakV4vIByrWacgBxy1x3WC+rZoW7TX+JJiL+y942qIYbMoNMMB8xFpE5RDLSjSecMpFhJJXoafVTvju8="
dist: trusty

python:
  - 2.7
  - 3.4
  - 3.5
  - 3.6

matrix:
  include:
    - python: 2.7
      env:
        - TEST_GMPY="true"
        - TEST_MATPLOTLIB="true"
        - TEST_THEANO="true"
        - TEST_ASCII="true"
        - TEST_AUTOWRAP="true"
        - TEST_SYMENGINE="true"
      addons:
        apt:
          packages:
            # for theano
            - libatlas-dev
            - libatlas-base-dev
            - liblapack-dev
            - gfortran
    - python: 3.5
      env:
        - TEST_GMPY="true"
        - TEST_MATPLOTLIB="true"
        - TEST_THEANO="true"
        - TEST_ASCII="true"
        - TEST_AUTOWRAP="true"
        - TEST_SYMENGINE="true"
      addons:
        apt:
          packages:
            # for theano
            - libatlas-dev
            - libatlas-base-dev
            - liblapack-dev
            - gfortran
            - python-scipy

    - python: 3.5
      env:
        - TEST_SPHINX="true"
        - FASTCACHE="false"
      addons:
        apt:
          packages:
            - graphviz
            - inkscape
            - texlive
            - texlive-xetex
            - texlive-fonts-recommended
            - texlive-latex-extra
            - latexmk
            - lmodern
            - librsvg2-bin
            - imagemagick
            - docbook2x

    - python: 2.7
      env:
        - TEST_SLOW="true"
        - SPLIT="1/3"
    - python: 2.7
      env:
        - TEST_SLOW="true"
        - SPLIT="2/3"
    - python: 2.7
      env:
        - TEST_SLOW="true"
        - SPLIT="3/3"
    - python: 3.5
      env:
        - TEST_SLOW="true"
        - SPLIT="1/3"
    - python: 3.5
      env:
        - TEST_SLOW="true"
        - SPLIT="2/3"
    - python: 3.5
      env:
        - TEST_SLOW="true"
        - SPLIT="3/3"

    # Everything here and below is in the allow_failures. The need to be
    # duplicated here and in that section below.
    - python: 3.5 # Dummy value
      env:
        - TEST_SAGE="true"
        - FASTCACHE="false"
        - TEST_TENSORFLOW="true"
      sudo: true
      dist: trusty

    - python: "pypy"
      env:
        - TEST_DOCTESTS="true"
        - FASTCACHE="false"
        - TEST_SETUP="true"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="1/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="2/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="3/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="4/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy

  allow_failures:
    # The apt installation of sage fails sometimes
    - python: 3.5 # Dummy value
      env:
        - TEST_SAGE="true"
        - FASTCACHE="false"
        - TEST_TENSORFLOW="true"
      sudo: true
      dist: trusty
    # PyPy randomly fails because of some PyPy bugs (Fatal RPython error: AssertionError)
    - python: "pypy"
      env:
        - TEST_DOCTESTS="true"
        - FASTCACHE="false"
        - TEST_SETUP="true"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="1/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="2/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="3/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy
    - python: "pypy"
      env:
        - TEST_SYMPY="true"
        - SPLIT="4/4"
        - FASTCACHE="false"
      addons:
        apt:
          sources:
            - pypy
          packages:
            - pypy

before_install:
  - if [[ "${FASTCACHE}" != "false" ]]; then
      pip install fastcache;
    fi
  - if [[ "${TEST_SPHINX}" == "true" ]]; then
      pip install "sphinx" "docutils" doctr;
    fi
  - |
    if [[ "${TEST_MATPLOTLIB}" == "true" || "${TEST_SYMENGINE}" == "true" ]]; then
    # We do this conditionally because it saves us some downloading if the
    # version is the same.
        if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
          wget https://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh;
        else
          wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
        fi
        bash miniconda.sh -b -p $HOME/miniconda;
        export PATH="$HOME/miniconda/bin:$PATH";
        hash -r;
        conda config --set always_yes yes --set changeps1 no;
        conda update -q conda;
        conda info -a;
        conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION matplotlib numpy scipy pip llvmlite;
        source activate test-environment;
    fi
  - if [[ "${TEST_GMPY}" == "true" ]]; then
        conda install gmpy2 -c conda-forge;
    fi
  - if [[ "${TEST_SYMENGINE}" == "true" ]]; then
        conda config --add channels conda-forge;
        conda config --add channels symengine/label/dev;
        conda install python-symengine=0.3.*;
    fi
  - |
    if [[ "${TEST_THEANO}" == "true" ]]; then
        # this assumes TEST_THEANO runs in the same build as TEST_MATPLOTLIB
        conda install theano;
    fi
  - |
    if [[ "${TEST_AUTOWRAP}" == "true" ]]; then
        # this assumes TEST_AUTOWRAP runs in the same build as TEST_MATPLOTLIB
        conda install libgfortran libgcc gcc cython;
    fi
  - |
    if [[ "${TEST_TENSORFLOW}" == "true" ]]; then
      pip install mpmath;
      if [[ "$TRAVIS_PYTHON_VERSION" == "2.7" ]]; then
        pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.9.0-cp27-none-linux_x86_64.whl;
      elif [[ "$TRAVIS_PYTHON_VERSION" == "3.4" ]]; then
        pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.9.0-cp34-cp34m-linux_x86_64.whl;
      elif [[ "$TRAVIS_PYTHON_VERSION" == "3.5" ]]; then
        pip install https://storage.googleapis.com/tensorflow/linux/cpu/tensorflow-0.9.0-cp35-cp35m-linux_x86_64.whl;
      fi
    fi
  - if [[ "${TEST_SAGE}" == "true" ]]; then
      sudo apt-add-repository -y ppa:aims/sagemath;
      sudo apt-get update;
      sudo apt-get install -y sagemath-upstream-binary;
    fi
  - if [[ "$TRAVIS_PYTHON_VERSION" == "3.6" ]]; then
      pip install matchpy;
    fi
install:
  # If a command fails, fail the build.
  - set -e
#The install cycle below is to test installation on systems without setuptools.
  - if [ "$TRAVIS_PYTHON_VERSION" = "pypy" ];
      then virtualenv -p /usr/bin/pypy ~/.venv;
           . ~/.venv/bin/activate;
    fi
  # -We:invalid makes invalid escape sequences error in Python 3.6. See
  # -#12028.
  - if [[ "${TEST_SAGE}" != "true" ]]; then
      pip install mpmath;
      pip uninstall -y setuptools;
      python -We:invalid setup.py install;
      pip uninstall -y sympy;
      pip install --upgrade setuptools;
      python -We:invalid -m compileall -f sympy/ || (echo "ERROR Invalid escape sequence found. You likely need to use a raw string." && exit 1);
      python -We:invalid setup.py install;
    fi
script:
  # Don't run doctr if the build fails
  - set -e
  - bin/test_travis.sh
  - if [[ "${TEST_SPHINX}" == "true" ]]; then
        doctr deploy dev --deploy-repo sympy/sympy_doc --command './generate_indexes.py';
    fi
notifications:
  email: false
